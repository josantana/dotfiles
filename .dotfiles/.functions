## FUNCTIONS

# Reload bash
function reload () {
    source ~/.bashrc;
}

# Create a new directory and enter it
function mkd () {
    mkdir -p "$@" && cd "$@";
}

# Free port in use
function free () {
    kill "$(lsof -t -i :$1)";
}

# Git commands
function repo () {
    if [ -z "${1}" ]; then
        echo "";
        echo "usage: repo [<command>] [<options>]";
        echo "";
        echo "    s, sync           fetch and pull";
        echo "    p, pull           pull from remote";
        echo "    l, list           list existing branches";
        echo "    c, check          checkout on a existing branch";
        echo "    n, new            checkout on a new branch";
        echo "    m, merge          merge existing branch";
        echo "    r, rename         rename current branch";
        echo "    d, del            delete branch";
        echo "";
        return 1;
    fi;
    if [ "${1}" == 's' ] || [ "${1}" == 'sync' ]; then
        git fetch && git pull;
    fi;
    if [ "${1}" == 'p' ] || [ "${1}" == 'pull' ]; then
        git pull;
    fi;
    if [ "${1}" == 'l' ] || [ "${1}" == 'list' ]; then
        git branch -a;
    fi;
    if [ "${1}" == 'c' ] || [ "${1}" == 'check' ]; then
        if [ "${2}" == 'd' ]; then
            git checkout develop;
            return 1;
        fi;
        if [ "${2}" == 'm' ]; then
            git checkout master;
            return 1;
        fi;
        git checkout ${2};
    fi;
    if [ "${1}" == 'n' ] || [ "${1}" == 'new' ]; then
        git checkout -b ${2};
        git branch -u origin/${2};
        git checkout ${2};
    fi;
    if [ "${1}" == 'd' ] || [ "${1}" == 'del' ]; then
        git checkout master && git branch -d ${2};
    fi;
    if [ "${1}" == 'r' ] || [ "${1}" == 'rename' ]; then
        git branch -m ${2};
    fi;
    if [ "${1}" == 'm' ] || [ "${1}" == 'merge' ]; then
        git merge ${2};
    fi;
}

# Determine size of a file or total size of a directory
function fs () {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* *;
    fi;
}

# Start an HTTP server from a directory, optionally specifying the port
function server () {
    local port="${1:-8000}";
    sleep 1 && open "http://localhost:${port}/" &
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Open in browser
function surf () {
    if [ -z '$1' ]; then
        open "$(/usr/local/bin/DefaultApplication -url 'http:')"
    else
        open -a "$(/usr/local/bin/DefaultApplication -url 'http:')" $1
    fi
}

# Create a data URL from a file
function dataurl () {
    local mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Compare original and gzipped file size
function gz () {
    local origsize=$(wc -c < "$1");
    local gzipsize=$(gzip -c "$1" | wc -c);
    local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
    printf "orig: %d bytes\n" "$origsize";
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames () {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified.";
        return 1;
    fi;

    local domain="${1}";
    echo "Testing ${domain}…";
    echo ""; # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
        | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
            no_serial, no_sigdump, no_signame, no_validity, no_version");
        echo "Common Name:";
        echo ""; # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
        echo ""; # newline
        echo "Subject Alternative Name(s):";
        echo ""; # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
        return 0;
    else
        echo "ERROR: Certificate not found.";
        return 1;
    fi;
}
